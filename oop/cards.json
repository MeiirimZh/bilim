[
    {
      "id": 1,
      "question": "Что такое ООП?",
      "answer": "ООП — это парадигма программирования, основанная на использовании объектов и классов."
    },
    {
      "id": 2,
      "question": "Что такое класс в ООП?",
      "answer": "Класс описывает структуру и поведение объектов."
    },
    {
      "id": 3,
      "question": "Что такое объект в ООП?",
      "answer": "Объект — это экземпляр класса."
    },
    {
      "id": 4,
      "question": "Сколько основных принципов включает ООП?",
      "answer": "Четыре: инкапсуляция, наследование, полиморфизм, абстракция."
    },
    {
      "id": 5,
      "question": "Что такое инкапсуляция?",
      "answer": "Это сокрытие внутренней реализации объекта от внешнего мира."
    },
    {
      "id": 6,
      "question": "Зачем нужна инкапсуляция?",
      "answer": "Для защиты данных от некорректного использования."
    },
    {
      "id": 7,
      "question": "Как осуществляется доступ к данным при инкапсуляции?",
      "answer": "Через публичные методы: геттеры и сеттеры."
    },
    {
      "id": 8,
      "question": "Пример инкапсуляции?",
      "answer": "Поля класса делают private, а доступ к ним предоставляют через методы get и set."
    },
    {
      "id": 9,
      "question": "Что такое наследование?",
      "answer": "Это механизм создания новых классов на основе существующих."
    },
    {
      "id": 10,
      "question": "Что получает наследник при наследовании?",
      "answer": "Свойства и методы базового класса."
    },
    {
      "id": 11,
      "question": "Пример наследования?",
      "answer": "class Dog : Animal — класс Dog наследует всё от Animal."
    },
    {
      "id": 12,
      "question": "Что такое полиморфизм?",
      "answer": "Это способность объектов с одинаковым интерфейсом вести себя по-разному в зависимости от типа."
    },
    {
      "id": 13,
      "question": "Какие два вида полиморфизма бывают?",
      "answer": "Перегрузка методов (compile-time) и переопределение методов (runtime)."
    },
    {
      "id": 14,
      "question": "Что такое перегрузка методов?",
      "answer": "Это методы с одинаковыми именами, но разными параметрами."
    },
    {
      "id": 15,
      "question": "Что такое переопределение методов?",
      "answer": "Это изменение поведения методов в наследуемых классах с помощью virtual и override."
    },
    {
      "id": 16,
      "question": "Что такое абстракция?",
      "answer": "Это выделение главных характеристик объекта и сокрытие второстепенных."
    },
    {
      "id": 17,
      "question": "Как абстракция помогает разработчику?",
      "answer": "Позволяет работать с объектами через интерфейсы или абстрактные классы, не зная их реализации."
    },
    {
      "id": 18,
      "question": "Пример абстракции?",
      "answer": "abstract class Shape может описывать метод Draw(), но конкретные фигуры реализуют его по-разному."
    },
    {
      "id": 19,
      "question": "Для чего используются переменные в C#?",
      "answer": "Для хранения данных, которые могут изменяться в процессе выполнения программы."
    },
    {
      "id": 20,
      "question": "Что включает в себя переменная в C#?",
      "answer": "Тип данных, имя (идентификатор) и, при необходимости, начальное значение."
    },
    {
      "id": 21,
      "question": "Что делает объявление переменной?",
      "answer": "Оно сообщает компилятору зарезервировать в памяти место под конкретный тип данных."
    },
    {
      "id": 22,
      "question": "Как выглядит общая форма объявления переменной в C#?",
      "answer": "<тип_данных> <имя_переменной> = <значение>; // значение можно не указывать"
    },
    {
      "id": 23,
      "question": "Пример объявления переменной типа int без начального значения?",
      "answer": "int age;"
    },
    {
      "id": 24,
      "question": "Пример объявления переменной типа string с начальным значением?",
      "answer": "string name = \"Miras\";"
    },
    {
      "id": 25,
      "question": "Какие два типа данных существуют в C#?",
      "answer": "Значимые (value types) и ссылочные (reference types)."
    },
    {
      "id": 26,
      "question": "Где располагаются значимые типы данных?",
      "answer": "В стеке."
    },
    {
      "id": 27,
      "question": "Где располагаются ссылочные типы данных?",
      "answer": "В куче (heap), и хранят ссылку на объект."
    },
    {
      "id": 28,
      "question": "Пример переменной типа int?",
      "answer": "int count = 5;"
    },
    {
      "id": 29,
      "question": "Пример переменной типа double?",
      "answer": "double price = 99.99;"
    },
    {
      "id": 30,
      "question": "Пример переменной типа bool?",
      "answer": "bool isOpen = true;"
    },
    {
      "id": 31,
      "question": "Пример переменной типа char?",
      "answer": "char letter = 'A';"
    },
    {
      "id": 32,
      "question": "Пример ссылочного типа string?",
      "answer": "string greeting = \"Hello\";"
    },
    {
      "id": 33,
      "question": "Что такое неявная типизация в C#?",
      "answer": "Это использование ключевого слова var вместо явного указания типа."
    },
    {
      "id": 34,
      "question": "Когда можно использовать var?",
      "answer": "Только при одновременной инициализации переменной."
    },
    {
      "id": 35,
      "question": "Пример корректного использования var?",
      "answer": "var score = 100; // тип int"
    },
    {
      "id": 36,
      "question": "Что произойдёт, если объявить var без инициализации?",
      "answer": "Произойдёт ошибка компиляции."
    },
    {
      "id": 37,
      "question": "Можно ли проинициализировать переменную позже?",
      "answer": "Да, можно сначала объявить, а потом присвоить значение."
    },
    {
      "id": 38,
      "question": "Пример инициализации переменной позже?",
      "answer": "int number; number = 10;"
    },
    {
      "id": 39,
      "question": "Можно ли изменять значение переменной после инициализации?",
      "answer": "Да, можно присваивать новое значение."
    },
    {
      "id": 40,
      "question": "Можно ли использовать переменные в выражениях?",
      "answer": "Да, например: int sum = a + b;"
    },
    {
      "id": 41,
      "question": "Что такое область видимости переменной в C#?",
      "answer": "Это область кода, в которой переменная доступна, обычно внутри блока { }."
    },
    {
      "id": 42,
      "question": "Что произойдёт, если обратиться к переменной вне её области видимости?",
      "answer": "Будет ошибка компиляции."
    },
    {
      "id": 43,
      "question": "Что такое константа в C#?",
      "answer": "Это переменная, значение которой нельзя изменить."
    },
    {
      "id": 44,
      "question": "Как объявить константу в C#?",
      "answer": "С помощью ключевого слова const, например: const double Pi = 3.14;"
    },
    {
      "id": 45,
      "question": "Можно ли изменить значение константы?",
      "answer": "Нет, это вызовет ошибку компиляции."
    },
    {
      "id": 46,
      "question": "Какова основа структуры программы на C#?",
      "answer": "Программа основана на использовании классов и методов и следует строгому порядку выполнения."
    },
    {
      "id": 47,
      "question": "Какой стиль программирования поддерживает C#?",
      "answer": "Объектно-ориентированное программирование с строгой типизацией."
    },
    {
      "id": 48,
      "question": "С чего начинается каждая программа на C#?",
      "answer": "С объявления пространства имён и класса, содержащего метод Main()."
    },
    {
      "id": 49,
      "question": "Какой метод является точкой входа в программу на C#?",
      "answer": "Метод Main()."
    },
    {
      "id": 50,
      "question": "Пример базовой структуры программы на C#?",
      "answer": "using System;\n\nclass Program {\n    static void Main(string[] args) {\n        Console.WriteLine(\"Hello, world!\");\n    }\n}"
    },
    {
      "id": 51,
      "question": "Что происходит на этапе компиляции программы на C#?",
      "answer": "Исходный код компилируется в промежуточный язык (IL)."
    },
    {
      "id": 52,
      "question": "Где выполняется промежуточный язык (IL) C#?",
      "answer": "В среде выполнения .NET CLR."
    },
    {
      "id": 53,
      "question": "Что делает CLR при запуске программы?",
      "answer": "Ищет метод Main() и начинает выполнять инструкции по порядку."
    },
    {
      "id": 54,
      "question": "В каком порядке выполняются инструкции в методе Main()?",
      "answer": "Сверху вниз."
    },
    {
      "id": 55,
      "question": "Что может изменить порядок выполнения инструкций?",
      "answer": "Управляющие конструкции: if, for, while и т.д."
    },
    {
      "id": 56,
      "question": "Когда программа на C# завершает выполнение?",
      "answer": "Когда доходит до конца метода Main() или выполняется команда return."
    }
  ]
  